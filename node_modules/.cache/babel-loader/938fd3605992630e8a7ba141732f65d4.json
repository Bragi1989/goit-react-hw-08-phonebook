{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const instance = axios.create({\n  baseURL: 'https://connections-api.herokuapp.com'\n});\nconst setToken = token => {\n  instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\nexport const loginThunk = createAsyncThunk('auth/login', async (formData, thunkAPI) => {\n  try {\n    const {\n      data\n    } = await instance.post('/users/login', formData);\n    setToken(data.token);\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const registerThunk = createAsyncThunk('auth/register', async (formData, thunkAPI) => {\n  try {\n    const {\n      data\n    } = await instance.post('/users/signup', formData);\n    setToken(data.token);\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const logOutThunk = createAsyncThunk('auth/logOut', async (_, thunkAPI) => {\n  try {\n    const {\n      data\n    } = await instance.post('/users/logout');\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const refreshThunk = createAsyncThunk('auth/refresh', async (_, thunkAPI) => {\n  const state = thunkAPI.getState();\n  const token = state.auth.token;\n  if (token === null) {\n    return thunkAPI.rejectWithValue('Unable to fetch user');\n  }\n  try {\n    setToken(token);\n    const {\n      data\n    } = await instance.get('/users/current');\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n}, {\n  condition: (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n    const token = state.auth.token;\n    if (!token) return false;\n    return true;\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","instance","create","baseURL","setToken","token","defaults","headers","common","Authorization","loginThunk","formData","thunkAPI","data","post","error","rejectWithValue","message","registerThunk","logOutThunk","_","refreshThunk","state","getState","auth","get","condition"],"sources":["D:/GitHub/goit-react-hw-08-phonebook/src/redux/auth/operations.jsx"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const instance = axios.create({\n  baseURL: 'https://connections-api.herokuapp.com',\n});\n\nconst setToken = token => {\n  instance.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nexport const loginThunk = createAsyncThunk(\n  'auth/login',\n  async (formData, thunkAPI) => {\n    try {\n      const { data } = await instance.post('/users/login', formData);\n      setToken(data.token);\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const registerThunk = createAsyncThunk(\n  'auth/register',\n  async (formData, thunkAPI) => {\n    try {\n      const { data } = await instance.post('/users/signup', formData);\n      setToken(data.token);\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const logOutThunk = createAsyncThunk(\n  'auth/logOut',\n  async (_, thunkAPI) => {\n    try {\n      const { data } = await instance.post('/users/logout');\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const refreshThunk = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n    const token = state.auth.token;\n\n    if (token === null) {\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      setToken(token);\n      const { data } = await instance.get('/users/current');\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  },\n  {\n    condition: (_, thunkAPI) => {\n      const state = thunkAPI.getState();\n      const token = state.auth.token;\n      if (!token) return false;\n      return true;\n    },\n  }\n);\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EACnCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGC,KAAK,IAAI;EACxBJ,QAAQ,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAACC,aAAa,GAAI,UAASJ,KAAM,EAAC;AACpE,CAAC;AAED,OAAO,MAAMK,UAAU,GAAGX,gBAAgB,CACxC,YAAY,EACZ,OAAOY,QAAQ,EAAEC,QAAQ,KAAK;EAC5B,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,cAAc,EAAEH,QAAQ,CAAC;IAC9DP,QAAQ,CAACS,IAAI,CAACR,KAAK,CAAC;IACpB,OAAOQ,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGnB,gBAAgB,CAC3C,eAAe,EACf,OAAOY,QAAQ,EAAEC,QAAQ,KAAK;EAC5B,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,eAAe,EAAEH,QAAQ,CAAC;IAC/DP,QAAQ,CAACS,IAAI,CAACR,KAAK,CAAC;IACpB,OAAOQ,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAGpB,gBAAgB,CACzC,aAAa,EACb,OAAOqB,CAAC,EAAER,QAAQ,KAAK;EACrB,IAAI;IACF,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,eAAe,CAAC;IACrD,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAGtB,gBAAgB,CAC1C,cAAc,EACd,OAAOqB,CAAC,EAAER,QAAQ,KAAK;EACrB,MAAMU,KAAK,GAAGV,QAAQ,CAACW,QAAQ,CAAC,CAAC;EACjC,MAAMlB,KAAK,GAAGiB,KAAK,CAACE,IAAI,CAACnB,KAAK;EAE9B,IAAIA,KAAK,KAAK,IAAI,EAAE;IAClB,OAAOO,QAAQ,CAACI,eAAe,CAAC,sBAAsB,CAAC;EACzD;EAEA,IAAI;IACFZ,QAAQ,CAACC,KAAK,CAAC;IACf,MAAM;MAAEQ;IAAK,CAAC,GAAG,MAAMZ,QAAQ,CAACwB,GAAG,CAAC,gBAAgB,CAAC;IACrD,OAAOZ,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CAAC,EACD;EACES,SAAS,EAAEA,CAACN,CAAC,EAAER,QAAQ,KAAK;IAC1B,MAAMU,KAAK,GAAGV,QAAQ,CAACW,QAAQ,CAAC,CAAC;IACjC,MAAMlB,KAAK,GAAGiB,KAAK,CAACE,IAAI,CAACnB,KAAK;IAC9B,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;IACxB,OAAO,IAAI;EACb;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module"}