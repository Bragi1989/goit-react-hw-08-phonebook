{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.anyTypeAnnotation = anyTypeAnnotation;\nexports.argumentPlaceholder = argumentPlaceholder;\nexports.arrayExpression = arrayExpression;\nexports.arrayPattern = arrayPattern;\nexports.arrayTypeAnnotation = arrayTypeAnnotation;\nexports.arrowFunctionExpression = arrowFunctionExpression;\nexports.assignmentExpression = assignmentExpression;\nexports.assignmentPattern = assignmentPattern;\nexports.awaitExpression = awaitExpression;\nexports.bigIntLiteral = bigIntLiteral;\nexports.binaryExpression = binaryExpression;\nexports.bindExpression = bindExpression;\nexports.blockStatement = blockStatement;\nexports.booleanLiteral = booleanLiteral;\nexports.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;\nexports.booleanTypeAnnotation = booleanTypeAnnotation;\nexports.breakStatement = breakStatement;\nexports.callExpression = callExpression;\nexports.catchClause = catchClause;\nexports.classAccessorProperty = classAccessorProperty;\nexports.classBody = classBody;\nexports.classDeclaration = classDeclaration;\nexports.classExpression = classExpression;\nexports.classImplements = classImplements;\nexports.classMethod = classMethod;\nexports.classPrivateMethod = classPrivateMethod;\nexports.classPrivateProperty = classPrivateProperty;\nexports.classProperty = classProperty;\nexports.conditionalExpression = conditionalExpression;\nexports.continueStatement = continueStatement;\nexports.debuggerStatement = debuggerStatement;\nexports.decimalLiteral = decimalLiteral;\nexports.declareClass = declareClass;\nexports.declareExportAllDeclaration = declareExportAllDeclaration;\nexports.declareExportDeclaration = declareExportDeclaration;\nexports.declareFunction = declareFunction;\nexports.declareInterface = declareInterface;\nexports.declareModule = declareModule;\nexports.declareModuleExports = declareModuleExports;\nexports.declareOpaqueType = declareOpaqueType;\nexports.declareTypeAlias = declareTypeAlias;\nexports.declareVariable = declareVariable;\nexports.declaredPredicate = declaredPredicate;\nexports.decorator = decorator;\nexports.directive = directive;\nexports.directiveLiteral = directiveLiteral;\nexports.doExpression = doExpression;\nexports.doWhileStatement = doWhileStatement;\nexports.emptyStatement = emptyStatement;\nexports.emptyTypeAnnotation = emptyTypeAnnotation;\nexports.enumBooleanBody = enumBooleanBody;\nexports.enumBooleanMember = enumBooleanMember;\nexports.enumDeclaration = enumDeclaration;\nexports.enumDefaultedMember = enumDefaultedMember;\nexports.enumNumberBody = enumNumberBody;\nexports.enumNumberMember = enumNumberMember;\nexports.enumStringBody = enumStringBody;\nexports.enumStringMember = enumStringMember;\nexports.enumSymbolBody = enumSymbolBody;\nexports.existsTypeAnnotation = existsTypeAnnotation;\nexports.exportAllDeclaration = exportAllDeclaration;\nexports.exportDefaultDeclaration = exportDefaultDeclaration;\nexports.exportDefaultSpecifier = exportDefaultSpecifier;\nexports.exportNamedDeclaration = exportNamedDeclaration;\nexports.exportNamespaceSpecifier = exportNamespaceSpecifier;\nexports.exportSpecifier = exportSpecifier;\nexports.expressionStatement = expressionStatement;\nexports.file = file;\nexports.forInStatement = forInStatement;\nexports.forOfStatement = forOfStatement;\nexports.forStatement = forStatement;\nexports.functionDeclaration = functionDeclaration;\nexports.functionExpression = functionExpression;\nexports.functionTypeAnnotation = functionTypeAnnotation;\nexports.functionTypeParam = functionTypeParam;\nexports.genericTypeAnnotation = genericTypeAnnotation;\nexports.identifier = identifier;\nexports.ifStatement = ifStatement;\nexports.import = _import;\nexports.importAttribute = importAttribute;\nexports.importDeclaration = importDeclaration;\nexports.importDefaultSpecifier = importDefaultSpecifier;\nexports.importExpression = importExpression;\nexports.importNamespaceSpecifier = importNamespaceSpecifier;\nexports.importSpecifier = importSpecifier;\nexports.indexedAccessType = indexedAccessType;\nexports.inferredPredicate = inferredPredicate;\nexports.interfaceDeclaration = interfaceDeclaration;\nexports.interfaceExtends = interfaceExtends;\nexports.interfaceTypeAnnotation = interfaceTypeAnnotation;\nexports.interpreterDirective = interpreterDirective;\nexports.intersectionTypeAnnotation = intersectionTypeAnnotation;\nexports.jSXAttribute = exports.jsxAttribute = jsxAttribute;\nexports.jSXClosingElement = exports.jsxClosingElement = jsxClosingElement;\nexports.jSXClosingFragment = exports.jsxClosingFragment = jsxClosingFragment;\nexports.jSXElement = exports.jsxElement = jsxElement;\nexports.jSXEmptyExpression = exports.jsxEmptyExpression = jsxEmptyExpression;\nexports.jSXExpressionContainer = exports.jsxExpressionContainer = jsxExpressionContainer;\nexports.jSXFragment = exports.jsxFragment = jsxFragment;\nexports.jSXIdentifier = exports.jsxIdentifier = jsxIdentifier;\nexports.jSXMemberExpression = exports.jsxMemberExpression = jsxMemberExpression;\nexports.jSXNamespacedName = exports.jsxNamespacedName = jsxNamespacedName;\nexports.jSXOpeningElement = exports.jsxOpeningElement = jsxOpeningElement;\nexports.jSXOpeningFragment = exports.jsxOpeningFragment = jsxOpeningFragment;\nexports.jSXSpreadAttribute = exports.jsxSpreadAttribute = jsxSpreadAttribute;\nexports.jSXSpreadChild = exports.jsxSpreadChild = jsxSpreadChild;\nexports.jSXText = exports.jsxText = jsxText;\nexports.labeledStatement = labeledStatement;\nexports.logicalExpression = logicalExpression;\nexports.memberExpression = memberExpression;\nexports.metaProperty = metaProperty;\nexports.mixedTypeAnnotation = mixedTypeAnnotation;\nexports.moduleExpression = moduleExpression;\nexports.newExpression = newExpression;\nexports.noop = noop;\nexports.nullLiteral = nullLiteral;\nexports.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;\nexports.nullableTypeAnnotation = nullableTypeAnnotation;\nexports.numberLiteral = NumberLiteral;\nexports.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;\nexports.numberTypeAnnotation = numberTypeAnnotation;\nexports.numericLiteral = numericLiteral;\nexports.objectExpression = objectExpression;\nexports.objectMethod = objectMethod;\nexports.objectPattern = objectPattern;\nexports.objectProperty = objectProperty;\nexports.objectTypeAnnotation = objectTypeAnnotation;\nexports.objectTypeCallProperty = objectTypeCallProperty;\nexports.objectTypeIndexer = objectTypeIndexer;\nexports.objectTypeInternalSlot = objectTypeInternalSlot;\nexports.objectTypeProperty = objectTypeProperty;\nexports.objectTypeSpreadProperty = objectTypeSpreadProperty;\nexports.opaqueType = opaqueType;\nexports.optionalCallExpression = optionalCallExpression;\nexports.optionalIndexedAccessType = optionalIndexedAccessType;\nexports.optionalMemberExpression = optionalMemberExpression;\nexports.parenthesizedExpression = parenthesizedExpression;\nexports.pipelineBareFunction = pipelineBareFunction;\nexports.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;\nexports.pipelineTopicExpression = pipelineTopicExpression;\nexports.placeholder = placeholder;\nexports.privateName = privateName;\nexports.program = program;\nexports.qualifiedTypeIdentifier = qualifiedTypeIdentifier;\nexports.recordExpression = recordExpression;\nexports.regExpLiteral = regExpLiteral;\nexports.regexLiteral = RegexLiteral;\nexports.restElement = restElement;\nexports.restProperty = RestProperty;\nexports.returnStatement = returnStatement;\nexports.sequenceExpression = sequenceExpression;\nexports.spreadElement = spreadElement;\nexports.spreadProperty = SpreadProperty;\nexports.staticBlock = staticBlock;\nexports.stringLiteral = stringLiteral;\nexports.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;\nexports.stringTypeAnnotation = stringTypeAnnotation;\nexports.super = _super;\nexports.switchCase = switchCase;\nexports.switchStatement = switchStatement;\nexports.symbolTypeAnnotation = symbolTypeAnnotation;\nexports.taggedTemplateExpression = taggedTemplateExpression;\nexports.templateElement = templateElement;\nexports.templateLiteral = templateLiteral;\nexports.thisExpression = thisExpression;\nexports.thisTypeAnnotation = thisTypeAnnotation;\nexports.throwStatement = throwStatement;\nexports.topicReference = topicReference;\nexports.tryStatement = tryStatement;\nexports.tSAnyKeyword = exports.tsAnyKeyword = tsAnyKeyword;\nexports.tSArrayType = exports.tsArrayType = tsArrayType;\nexports.tSAsExpression = exports.tsAsExpression = tsAsExpression;\nexports.tSBigIntKeyword = exports.tsBigIntKeyword = tsBigIntKeyword;\nexports.tSBooleanKeyword = exports.tsBooleanKeyword = tsBooleanKeyword;\nexports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = tsCallSignatureDeclaration;\nexports.tSConditionalType = exports.tsConditionalType = tsConditionalType;\nexports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;\nexports.tSConstructorType = exports.tsConstructorType = tsConstructorType;\nexports.tSDeclareFunction = exports.tsDeclareFunction = tsDeclareFunction;\nexports.tSDeclareMethod = exports.tsDeclareMethod = tsDeclareMethod;\nexports.tSEnumDeclaration = exports.tsEnumDeclaration = tsEnumDeclaration;\nexports.tSEnumMember = exports.tsEnumMember = tsEnumMember;\nexports.tSExportAssignment = exports.tsExportAssignment = tsExportAssignment;\nexports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;\nexports.tSExternalModuleReference = exports.tsExternalModuleReference = tsExternalModuleReference;\nexports.tSFunctionType = exports.tsFunctionType = tsFunctionType;\nexports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = tsImportEqualsDeclaration;\nexports.tSImportType = exports.tsImportType = tsImportType;\nexports.tSIndexSignature = exports.tsIndexSignature = tsIndexSignature;\nexports.tSIndexedAccessType = exports.tsIndexedAccessType = tsIndexedAccessType;\nexports.tSInferType = exports.tsInferType = tsInferType;\nexports.tSInstantiationExpression = exports.tsInstantiationExpression = tsInstantiationExpression;\nexports.tSInterfaceBody = exports.tsInterfaceBody = tsInterfaceBody;\nexports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = tsInterfaceDeclaration;\nexports.tSIntersectionType = exports.tsIntersectionType = tsIntersectionType;\nexports.tSIntrinsicKeyword = exports.tsIntrinsicKeyword = tsIntrinsicKeyword;\nexports.tSLiteralType = exports.tsLiteralType = tsLiteralType;\nexports.tSMappedType = exports.tsMappedType = tsMappedType;\nexports.tSMethodSignature = exports.tsMethodSignature = tsMethodSignature;\nexports.tSModuleBlock = exports.tsModuleBlock = tsModuleBlock;\nexports.tSModuleDeclaration = exports.tsModuleDeclaration = tsModuleDeclaration;\nexports.tSNamedTupleMember = exports.tsNamedTupleMember = tsNamedTupleMember;\nexports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;\nexports.tSNeverKeyword = exports.tsNeverKeyword = tsNeverKeyword;\nexports.tSNonNullExpression = exports.tsNonNullExpression = tsNonNullExpression;\nexports.tSNullKeyword = exports.tsNullKeyword = tsNullKeyword;\nexports.tSNumberKeyword = exports.tsNumberKeyword = tsNumberKeyword;\nexports.tSObjectKeyword = exports.tsObjectKeyword = tsObjectKeyword;\nexports.tSOptionalType = exports.tsOptionalType = tsOptionalType;\nexports.tSParameterProperty = exports.tsParameterProperty = tsParameterProperty;\nexports.tSParenthesizedType = exports.tsParenthesizedType = tsParenthesizedType;\nexports.tSPropertySignature = exports.tsPropertySignature = tsPropertySignature;\nexports.tSQualifiedName = exports.tsQualifiedName = tsQualifiedName;\nexports.tSRestType = exports.tsRestType = tsRestType;\nexports.tSSatisfiesExpression = exports.tsSatisfiesExpression = tsSatisfiesExpression;\nexports.tSStringKeyword = exports.tsStringKeyword = tsStringKeyword;\nexports.tSSymbolKeyword = exports.tsSymbolKeyword = tsSymbolKeyword;\nexports.tSThisType = exports.tsThisType = tsThisType;\nexports.tSTupleType = exports.tsTupleType = tsTupleType;\nexports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = tsTypeAliasDeclaration;\nexports.tSTypeAnnotation = exports.tsTypeAnnotation = tsTypeAnnotation;\nexports.tSTypeAssertion = exports.tsTypeAssertion = tsTypeAssertion;\nexports.tSTypeLiteral = exports.tsTypeLiteral = tsTypeLiteral;\nexports.tSTypeOperator = exports.tsTypeOperator = tsTypeOperator;\nexports.tSTypeParameter = exports.tsTypeParameter = tsTypeParameter;\nexports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = tsTypeParameterDeclaration;\nexports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = tsTypeParameterInstantiation;\nexports.tSTypePredicate = exports.tsTypePredicate = tsTypePredicate;\nexports.tSTypeQuery = exports.tsTypeQuery = tsTypeQuery;\nexports.tSTypeReference = exports.tsTypeReference = tsTypeReference;\nexports.tSUndefinedKeyword = exports.tsUndefinedKeyword = tsUndefinedKeyword;\nexports.tSUnionType = exports.tsUnionType = tsUnionType;\nexports.tSUnknownKeyword = exports.tsUnknownKeyword = tsUnknownKeyword;\nexports.tSVoidKeyword = exports.tsVoidKeyword = tsVoidKeyword;\nexports.tupleExpression = tupleExpression;\nexports.tupleTypeAnnotation = tupleTypeAnnotation;\nexports.typeAlias = typeAlias;\nexports.typeAnnotation = typeAnnotation;\nexports.typeCastExpression = typeCastExpression;\nexports.typeParameter = typeParameter;\nexports.typeParameterDeclaration = typeParameterDeclaration;\nexports.typeParameterInstantiation = typeParameterInstantiation;\nexports.typeofTypeAnnotation = typeofTypeAnnotation;\nexports.unaryExpression = unaryExpression;\nexports.unionTypeAnnotation = unionTypeAnnotation;\nexports.updateExpression = updateExpression;\nexports.v8IntrinsicIdentifier = v8IntrinsicIdentifier;\nexports.variableDeclaration = variableDeclaration;\nexports.variableDeclarator = variableDeclarator;\nexports.variance = variance;\nexports.voidTypeAnnotation = voidTypeAnnotation;\nexports.whileStatement = whileStatement;\nexports.withStatement = withStatement;\nexports.yieldExpression = yieldExpression;\nvar _validateNode = require(\"../validateNode.js\");\nvar _deprecationWarning = require(\"../../utils/deprecationWarning.js\");\nfunction arrayExpression() {\n  let elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return (0, _validateNode.default)({\n    type: \"ArrayExpression\",\n    elements\n  });\n}\nfunction assignmentExpression(operator, left, right) {\n  return (0, _validateNode.default)({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right\n  });\n}\nfunction binaryExpression(operator, left, right) {\n  return (0, _validateNode.default)({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right\n  });\n}\nfunction interpreterDirective(value) {\n  return (0, _validateNode.default)({\n    type: \"InterpreterDirective\",\n    value\n  });\n}\nfunction directive(value) {\n  return (0, _validateNode.default)({\n    type: \"Directive\",\n    value\n  });\n}\nfunction directiveLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"DirectiveLiteral\",\n    value\n  });\n}\nfunction blockStatement(body) {\n  let directives = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return (0, _validateNode.default)({\n    type: \"BlockStatement\",\n    body,\n    directives\n  });\n}\nfunction breakStatement() {\n  let label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return (0, _validateNode.default)({\n    type: \"BreakStatement\",\n    label\n  });\n}\nfunction callExpression(callee, _arguments) {\n  return (0, _validateNode.default)({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments\n  });\n}\nfunction catchClause() {\n  let param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let body = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _validateNode.default)({\n    type: \"CatchClause\",\n    param,\n    body\n  });\n}\nfunction conditionalExpression(test, consequent, alternate) {\n  return (0, _validateNode.default)({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate\n  });\n}\nfunction continueStatement() {\n  let label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return (0, _validateNode.default)({\n    type: \"ContinueStatement\",\n    label\n  });\n}\nfunction debuggerStatement() {\n  return {\n    type: \"DebuggerStatement\"\n  };\n}\nfunction doWhileStatement(test, body) {\n  return (0, _validateNode.default)({\n    type: \"DoWhileStatement\",\n    test,\n    body\n  });\n}\nfunction emptyStatement() {\n  return {\n    type: \"EmptyStatement\"\n  };\n}\nfunction expressionStatement(expression) {\n  return (0, _validateNode.default)({\n    type: \"ExpressionStatement\",\n    expression\n  });\n}\nfunction file(program) {\n  let comments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let tokens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"File\",\n    program,\n    comments,\n    tokens\n  });\n}\nfunction forInStatement(left, right, body) {\n  return (0, _validateNode.default)({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body\n  });\n}\nfunction forStatement() {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let test = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body\n  });\n}\nfunction functionDeclaration() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let params = arguments.length > 1 ? arguments[1] : undefined;\n  let body = arguments.length > 2 ? arguments[2] : undefined;\n  let generator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let async = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return (0, _validateNode.default)({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async\n  });\n}\nfunction functionExpression() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let params = arguments.length > 1 ? arguments[1] : undefined;\n  let body = arguments.length > 2 ? arguments[2] : undefined;\n  let generator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let async = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return (0, _validateNode.default)({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async\n  });\n}\nfunction identifier(name) {\n  return (0, _validateNode.default)({\n    type: \"Identifier\",\n    name\n  });\n}\nfunction ifStatement(test, consequent) {\n  let alternate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate\n  });\n}\nfunction labeledStatement(label, body) {\n  return (0, _validateNode.default)({\n    type: \"LabeledStatement\",\n    label,\n    body\n  });\n}\nfunction stringLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"StringLiteral\",\n    value\n  });\n}\nfunction numericLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"NumericLiteral\",\n    value\n  });\n}\nfunction nullLiteral() {\n  return {\n    type: \"NullLiteral\"\n  };\n}\nfunction booleanLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"BooleanLiteral\",\n    value\n  });\n}\nfunction regExpLiteral(pattern) {\n  let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return (0, _validateNode.default)({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags\n  });\n}\nfunction logicalExpression(operator, left, right) {\n  return (0, _validateNode.default)({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right\n  });\n}\nfunction memberExpression(object, property) {\n  let computed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let optional = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional\n  });\n}\nfunction newExpression(callee, _arguments) {\n  return (0, _validateNode.default)({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments\n  });\n}\nfunction program(body) {\n  let directives = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"script\";\n  let interpreter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n    sourceFile: null\n  });\n}\nfunction objectExpression(properties) {\n  return (0, _validateNode.default)({\n    type: \"ObjectExpression\",\n    properties\n  });\n}\nfunction objectMethod() {\n  let kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"method\";\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  let params = arguments.length > 2 ? arguments[2] : undefined;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  let computed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let generator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let async = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  return (0, _validateNode.default)({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async\n  });\n}\nfunction objectProperty(key, value) {\n  let computed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let shorthand = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let decorators = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  return (0, _validateNode.default)({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators\n  });\n}\nfunction restElement(argument) {\n  return (0, _validateNode.default)({\n    type: \"RestElement\",\n    argument\n  });\n}\nfunction returnStatement() {\n  let argument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return (0, _validateNode.default)({\n    type: \"ReturnStatement\",\n    argument\n  });\n}\nfunction sequenceExpression(expressions) {\n  return (0, _validateNode.default)({\n    type: \"SequenceExpression\",\n    expressions\n  });\n}\nfunction parenthesizedExpression(expression) {\n  return (0, _validateNode.default)({\n    type: \"ParenthesizedExpression\",\n    expression\n  });\n}\nfunction switchCase() {\n  let test = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let consequent = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _validateNode.default)({\n    type: \"SwitchCase\",\n    test,\n    consequent\n  });\n}\nfunction switchStatement(discriminant, cases) {\n  return (0, _validateNode.default)({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases\n  });\n}\nfunction thisExpression() {\n  return {\n    type: \"ThisExpression\"\n  };\n}\nfunction throwStatement(argument) {\n  return (0, _validateNode.default)({\n    type: \"ThrowStatement\",\n    argument\n  });\n}\nfunction tryStatement(block) {\n  let handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let finalizer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer\n  });\n}\nfunction unaryExpression(operator, argument) {\n  let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (0, _validateNode.default)({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix\n  });\n}\nfunction updateExpression(operator, argument) {\n  let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return (0, _validateNode.default)({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix\n  });\n}\nfunction variableDeclaration(kind, declarations) {\n  return (0, _validateNode.default)({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations\n  });\n}\nfunction variableDeclarator(id) {\n  let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"VariableDeclarator\",\n    id,\n    init\n  });\n}\nfunction whileStatement(test, body) {\n  return (0, _validateNode.default)({\n    type: \"WhileStatement\",\n    test,\n    body\n  });\n}\nfunction withStatement(object, body) {\n  return (0, _validateNode.default)({\n    type: \"WithStatement\",\n    object,\n    body\n  });\n}\nfunction assignmentPattern(left, right) {\n  return (0, _validateNode.default)({\n    type: \"AssignmentPattern\",\n    left,\n    right\n  });\n}\nfunction arrayPattern(elements) {\n  return (0, _validateNode.default)({\n    type: \"ArrayPattern\",\n    elements\n  });\n}\nfunction arrowFunctionExpression(params, body) {\n  let async = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return (0, _validateNode.default)({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null\n  });\n}\nfunction classBody(body) {\n  return (0, _validateNode.default)({\n    type: \"ClassBody\",\n    body\n  });\n}\nfunction classExpression() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let superClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let body = arguments.length > 2 ? arguments[2] : undefined;\n  let decorators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators\n  });\n}\nfunction classDeclaration() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let superClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let body = arguments.length > 2 ? arguments[2] : undefined;\n  let decorators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators\n  });\n}\nfunction exportAllDeclaration(source) {\n  return (0, _validateNode.default)({\n    type: \"ExportAllDeclaration\",\n    source\n  });\n}\nfunction exportDefaultDeclaration(declaration) {\n  return (0, _validateNode.default)({\n    type: \"ExportDefaultDeclaration\",\n    declaration\n  });\n}\nfunction exportNamedDeclaration() {\n  let declaration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let specifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source\n  });\n}\nfunction exportSpecifier(local, exported) {\n  return (0, _validateNode.default)({\n    type: \"ExportSpecifier\",\n    local,\n    exported\n  });\n}\nfunction forOfStatement(left, right, body) {\n  let _await = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return (0, _validateNode.default)({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await\n  });\n}\nfunction importDeclaration(specifiers, source) {\n  return (0, _validateNode.default)({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source\n  });\n}\nfunction importDefaultSpecifier(local) {\n  return (0, _validateNode.default)({\n    type: \"ImportDefaultSpecifier\",\n    local\n  });\n}\nfunction importNamespaceSpecifier(local) {\n  return (0, _validateNode.default)({\n    type: \"ImportNamespaceSpecifier\",\n    local\n  });\n}\nfunction importSpecifier(local, imported) {\n  return (0, _validateNode.default)({\n    type: \"ImportSpecifier\",\n    local,\n    imported\n  });\n}\nfunction importExpression(source) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"ImportExpression\",\n    source,\n    options\n  });\n}\nfunction metaProperty(meta, property) {\n  return (0, _validateNode.default)({\n    type: \"MetaProperty\",\n    meta,\n    property\n  });\n}\nfunction classMethod() {\n  let kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"method\";\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  let params = arguments.length > 2 ? arguments[2] : undefined;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  let computed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let _static = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  let generator = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let async = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  return (0, _validateNode.default)({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async\n  });\n}\nfunction objectPattern(properties) {\n  return (0, _validateNode.default)({\n    type: \"ObjectPattern\",\n    properties\n  });\n}\nfunction spreadElement(argument) {\n  return (0, _validateNode.default)({\n    type: \"SpreadElement\",\n    argument\n  });\n}\nfunction _super() {\n  return {\n    type: \"Super\"\n  };\n}\nfunction taggedTemplateExpression(tag, quasi) {\n  return (0, _validateNode.default)({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi\n  });\n}\nfunction templateElement(value) {\n  let tail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (0, _validateNode.default)({\n    type: \"TemplateElement\",\n    value,\n    tail\n  });\n}\nfunction templateLiteral(quasis, expressions) {\n  return (0, _validateNode.default)({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions\n  });\n}\nfunction yieldExpression() {\n  let argument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let delegate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (0, _validateNode.default)({\n    type: \"YieldExpression\",\n    argument,\n    delegate\n  });\n}\nfunction awaitExpression(argument) {\n  return (0, _validateNode.default)({\n    type: \"AwaitExpression\",\n    argument\n  });\n}\nfunction _import() {\n  return {\n    type: \"Import\"\n  };\n}\nfunction bigIntLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"BigIntLiteral\",\n    value\n  });\n}\nfunction exportNamespaceSpecifier(exported) {\n  return (0, _validateNode.default)({\n    type: \"ExportNamespaceSpecifier\",\n    exported\n  });\n}\nfunction optionalMemberExpression(object, property) {\n  let computed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let optional = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional\n  });\n}\nfunction optionalCallExpression(callee, _arguments, optional) {\n  return (0, _validateNode.default)({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional\n  });\n}\nfunction classProperty(key) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let decorators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let computed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let _static = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  return (0, _validateNode.default)({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static\n  });\n}\nfunction classAccessorProperty(key) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let decorators = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let computed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let _static = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  return (0, _validateNode.default)({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static\n  });\n}\nfunction classPrivateProperty(key) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let decorators = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let _static = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return (0, _validateNode.default)({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static\n  });\n}\nfunction classPrivateMethod() {\n  let kind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"method\";\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  let params = arguments.length > 2 ? arguments[2] : undefined;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  let _static = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return (0, _validateNode.default)({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static\n  });\n}\nfunction privateName(id) {\n  return (0, _validateNode.default)({\n    type: \"PrivateName\",\n    id\n  });\n}\nfunction staticBlock(body) {\n  return (0, _validateNode.default)({\n    type: \"StaticBlock\",\n    body\n  });\n}\nfunction anyTypeAnnotation() {\n  return {\n    type: \"AnyTypeAnnotation\"\n  };\n}\nfunction arrayTypeAnnotation(elementType) {\n  return (0, _validateNode.default)({\n    type: \"ArrayTypeAnnotation\",\n    elementType\n  });\n}\nfunction booleanTypeAnnotation() {\n  return {\n    type: \"BooleanTypeAnnotation\"\n  };\n}\nfunction booleanLiteralTypeAnnotation(value) {\n  return (0, _validateNode.default)({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value\n  });\n}\nfunction nullLiteralTypeAnnotation() {\n  return {\n    type: \"NullLiteralTypeAnnotation\"\n  };\n}\nfunction classImplements(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"ClassImplements\",\n    id,\n    typeParameters\n  });\n}\nfunction declareClass(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let _extends = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  });\n}\nfunction declareFunction(id) {\n  return (0, _validateNode.default)({\n    type: \"DeclareFunction\",\n    id\n  });\n}\nfunction declareInterface(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let _extends = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  });\n}\nfunction declareModule(id, body) {\n  let kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind\n  });\n}\nfunction declareModuleExports(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"DeclareModuleExports\",\n    typeAnnotation\n  });\n}\nfunction declareTypeAlias(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let right = arguments.length > 2 ? arguments[2] : undefined;\n  return (0, _validateNode.default)({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right\n  });\n}\nfunction declareOpaqueType(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let supertype = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype\n  });\n}\nfunction declareVariable(id) {\n  return (0, _validateNode.default)({\n    type: \"DeclareVariable\",\n    id\n  });\n}\nfunction declareExportDeclaration() {\n  let declaration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let specifiers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source\n  });\n}\nfunction declareExportAllDeclaration(source) {\n  return (0, _validateNode.default)({\n    type: \"DeclareExportAllDeclaration\",\n    source\n  });\n}\nfunction declaredPredicate(value) {\n  return (0, _validateNode.default)({\n    type: \"DeclaredPredicate\",\n    value\n  });\n}\nfunction existsTypeAnnotation() {\n  return {\n    type: \"ExistsTypeAnnotation\"\n  };\n}\nfunction functionTypeAnnotation() {\n  let typeParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let params = arguments.length > 1 ? arguments[1] : undefined;\n  let rest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let returnType = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType\n  });\n}\nfunction functionTypeParam() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let typeAnnotation = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _validateNode.default)({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation\n  });\n}\nfunction genericTypeAnnotation(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters\n  });\n}\nfunction inferredPredicate() {\n  return {\n    type: \"InferredPredicate\"\n  };\n}\nfunction interfaceExtends(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters\n  });\n}\nfunction interfaceDeclaration(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let _extends = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  });\n}\nfunction interfaceTypeAnnotation() {\n  let _extends = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let body = arguments.length > 1 ? arguments[1] : undefined;\n  return (0, _validateNode.default)({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body\n  });\n}\nfunction intersectionTypeAnnotation(types) {\n  return (0, _validateNode.default)({\n    type: \"IntersectionTypeAnnotation\",\n    types\n  });\n}\nfunction mixedTypeAnnotation() {\n  return {\n    type: \"MixedTypeAnnotation\"\n  };\n}\nfunction emptyTypeAnnotation() {\n  return {\n    type: \"EmptyTypeAnnotation\"\n  };\n}\nfunction nullableTypeAnnotation(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation\n  });\n}\nfunction numberLiteralTypeAnnotation(value) {\n  return (0, _validateNode.default)({\n    type: \"NumberLiteralTypeAnnotation\",\n    value\n  });\n}\nfunction numberTypeAnnotation() {\n  return {\n    type: \"NumberTypeAnnotation\"\n  };\n}\nfunction objectTypeAnnotation(properties) {\n  let indexers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let callProperties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let internalSlots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let exact = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact\n  });\n}\nfunction objectTypeInternalSlot(id, value, optional, _static, method) {\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method\n  });\n}\nfunction objectTypeCallProperty(value) {\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null\n  });\n}\nfunction objectTypeIndexer() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  let value = arguments.length > 2 ? arguments[2] : undefined;\n  let variance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null\n  });\n}\nfunction objectTypeProperty(key, value) {\n  let variance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null\n  });\n}\nfunction objectTypeSpreadProperty(argument) {\n  return (0, _validateNode.default)({\n    type: \"ObjectTypeSpreadProperty\",\n    argument\n  });\n}\nfunction opaqueType(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let supertype = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let impltype = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype\n  });\n}\nfunction qualifiedTypeIdentifier(id, qualification) {\n  return (0, _validateNode.default)({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification\n  });\n}\nfunction stringLiteralTypeAnnotation(value) {\n  return (0, _validateNode.default)({\n    type: \"StringLiteralTypeAnnotation\",\n    value\n  });\n}\nfunction stringTypeAnnotation() {\n  return {\n    type: \"StringTypeAnnotation\"\n  };\n}\nfunction symbolTypeAnnotation() {\n  return {\n    type: \"SymbolTypeAnnotation\"\n  };\n}\nfunction thisTypeAnnotation() {\n  return {\n    type: \"ThisTypeAnnotation\"\n  };\n}\nfunction tupleTypeAnnotation(types) {\n  return (0, _validateNode.default)({\n    type: \"TupleTypeAnnotation\",\n    types\n  });\n}\nfunction typeofTypeAnnotation(argument) {\n  return (0, _validateNode.default)({\n    type: \"TypeofTypeAnnotation\",\n    argument\n  });\n}\nfunction typeAlias(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let right = arguments.length > 2 ? arguments[2] : undefined;\n  return (0, _validateNode.default)({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right\n  });\n}\nfunction typeAnnotation(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TypeAnnotation\",\n    typeAnnotation\n  });\n}\nfunction typeCastExpression(expression, typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation\n  });\n}\nfunction typeParameter() {\n  let bound = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let _default = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let variance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null\n  });\n}\nfunction typeParameterDeclaration(params) {\n  return (0, _validateNode.default)({\n    type: \"TypeParameterDeclaration\",\n    params\n  });\n}\nfunction typeParameterInstantiation(params) {\n  return (0, _validateNode.default)({\n    type: \"TypeParameterInstantiation\",\n    params\n  });\n}\nfunction unionTypeAnnotation(types) {\n  return (0, _validateNode.default)({\n    type: \"UnionTypeAnnotation\",\n    types\n  });\n}\nfunction variance(kind) {\n  return (0, _validateNode.default)({\n    type: \"Variance\",\n    kind\n  });\n}\nfunction voidTypeAnnotation() {\n  return {\n    type: \"VoidTypeAnnotation\"\n  };\n}\nfunction enumDeclaration(id, body) {\n  return (0, _validateNode.default)({\n    type: \"EnumDeclaration\",\n    id,\n    body\n  });\n}\nfunction enumBooleanBody(members) {\n  return (0, _validateNode.default)({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  });\n}\nfunction enumNumberBody(members) {\n  return (0, _validateNode.default)({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  });\n}\nfunction enumStringBody(members) {\n  return (0, _validateNode.default)({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null\n  });\n}\nfunction enumSymbolBody(members) {\n  return (0, _validateNode.default)({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null\n  });\n}\nfunction enumBooleanMember(id) {\n  return (0, _validateNode.default)({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null\n  });\n}\nfunction enumNumberMember(id, init) {\n  return (0, _validateNode.default)({\n    type: \"EnumNumberMember\",\n    id,\n    init\n  });\n}\nfunction enumStringMember(id, init) {\n  return (0, _validateNode.default)({\n    type: \"EnumStringMember\",\n    id,\n    init\n  });\n}\nfunction enumDefaultedMember(id) {\n  return (0, _validateNode.default)({\n    type: \"EnumDefaultedMember\",\n    id\n  });\n}\nfunction indexedAccessType(objectType, indexType) {\n  return (0, _validateNode.default)({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType\n  });\n}\nfunction optionalIndexedAccessType(objectType, indexType) {\n  return (0, _validateNode.default)({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null\n  });\n}\nfunction jsxAttribute(name) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"JSXAttribute\",\n    name,\n    value\n  });\n}\nfunction jsxClosingElement(name) {\n  return (0, _validateNode.default)({\n    type: \"JSXClosingElement\",\n    name\n  });\n}\nfunction jsxElement(openingElement) {\n  let closingElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let children = arguments.length > 2 ? arguments[2] : undefined;\n  let selfClosing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing\n  });\n}\nfunction jsxEmptyExpression() {\n  return {\n    type: \"JSXEmptyExpression\"\n  };\n}\nfunction jsxExpressionContainer(expression) {\n  return (0, _validateNode.default)({\n    type: \"JSXExpressionContainer\",\n    expression\n  });\n}\nfunction jsxSpreadChild(expression) {\n  return (0, _validateNode.default)({\n    type: \"JSXSpreadChild\",\n    expression\n  });\n}\nfunction jsxIdentifier(name) {\n  return (0, _validateNode.default)({\n    type: \"JSXIdentifier\",\n    name\n  });\n}\nfunction jsxMemberExpression(object, property) {\n  return (0, _validateNode.default)({\n    type: \"JSXMemberExpression\",\n    object,\n    property\n  });\n}\nfunction jsxNamespacedName(namespace, name) {\n  return (0, _validateNode.default)({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name\n  });\n}\nfunction jsxOpeningElement(name, attributes) {\n  let selfClosing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return (0, _validateNode.default)({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing\n  });\n}\nfunction jsxSpreadAttribute(argument) {\n  return (0, _validateNode.default)({\n    type: \"JSXSpreadAttribute\",\n    argument\n  });\n}\nfunction jsxText(value) {\n  return (0, _validateNode.default)({\n    type: \"JSXText\",\n    value\n  });\n}\nfunction jsxFragment(openingFragment, closingFragment, children) {\n  return (0, _validateNode.default)({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children\n  });\n}\nfunction jsxOpeningFragment() {\n  return {\n    type: \"JSXOpeningFragment\"\n  };\n}\nfunction jsxClosingFragment() {\n  return {\n    type: \"JSXClosingFragment\"\n  };\n}\nfunction noop() {\n  return {\n    type: \"Noop\"\n  };\n}\nfunction placeholder(expectedNode, name) {\n  return (0, _validateNode.default)({\n    type: \"Placeholder\",\n    expectedNode,\n    name\n  });\n}\nfunction v8IntrinsicIdentifier(name) {\n  return (0, _validateNode.default)({\n    type: \"V8IntrinsicIdentifier\",\n    name\n  });\n}\nfunction argumentPlaceholder() {\n  return {\n    type: \"ArgumentPlaceholder\"\n  };\n}\nfunction bindExpression(object, callee) {\n  return (0, _validateNode.default)({\n    type: \"BindExpression\",\n    object,\n    callee\n  });\n}\nfunction importAttribute(key, value) {\n  return (0, _validateNode.default)({\n    type: \"ImportAttribute\",\n    key,\n    value\n  });\n}\nfunction decorator(expression) {\n  return (0, _validateNode.default)({\n    type: \"Decorator\",\n    expression\n  });\n}\nfunction doExpression(body) {\n  let async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (0, _validateNode.default)({\n    type: \"DoExpression\",\n    body,\n    async\n  });\n}\nfunction exportDefaultSpecifier(exported) {\n  return (0, _validateNode.default)({\n    type: \"ExportDefaultSpecifier\",\n    exported\n  });\n}\nfunction recordExpression(properties) {\n  return (0, _validateNode.default)({\n    type: \"RecordExpression\",\n    properties\n  });\n}\nfunction tupleExpression() {\n  let elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return (0, _validateNode.default)({\n    type: \"TupleExpression\",\n    elements\n  });\n}\nfunction decimalLiteral(value) {\n  return (0, _validateNode.default)({\n    type: \"DecimalLiteral\",\n    value\n  });\n}\nfunction moduleExpression(body) {\n  return (0, _validateNode.default)({\n    type: \"ModuleExpression\",\n    body\n  });\n}\nfunction topicReference() {\n  return {\n    type: \"TopicReference\"\n  };\n}\nfunction pipelineTopicExpression(expression) {\n  return (0, _validateNode.default)({\n    type: \"PipelineTopicExpression\",\n    expression\n  });\n}\nfunction pipelineBareFunction(callee) {\n  return (0, _validateNode.default)({\n    type: \"PipelineBareFunction\",\n    callee\n  });\n}\nfunction pipelinePrimaryTopicReference() {\n  return {\n    type: \"PipelinePrimaryTopicReference\"\n  };\n}\nfunction tsParameterProperty(parameter) {\n  return (0, _validateNode.default)({\n    type: \"TSParameterProperty\",\n    parameter\n  });\n}\nfunction tsDeclareFunction() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let params = arguments.length > 2 ? arguments[2] : undefined;\n  let returnType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType\n  });\n}\nfunction tsDeclareMethod() {\n  let decorators = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  let typeParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let params = arguments.length > 3 ? arguments[3] : undefined;\n  let returnType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  return (0, _validateNode.default)({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType\n  });\n}\nfunction tsQualifiedName(left, right) {\n  return (0, _validateNode.default)({\n    type: \"TSQualifiedName\",\n    left,\n    right\n  });\n}\nfunction tsCallSignatureDeclaration() {\n  let typeParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let parameters = arguments.length > 1 ? arguments[1] : undefined;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  });\n}\nfunction tsConstructSignatureDeclaration() {\n  let typeParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let parameters = arguments.length > 1 ? arguments[1] : undefined;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  });\n}\nfunction tsPropertySignature(key) {\n  let typeAnnotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let initializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    initializer,\n    kind: null\n  });\n}\nfunction tsMethodSignature(key) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let parameters = arguments.length > 2 ? arguments[2] : undefined;\n  let typeAnnotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  return (0, _validateNode.default)({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null\n  });\n}\nfunction tsIndexSignature(parameters) {\n  let typeAnnotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation\n  });\n}\nfunction tsAnyKeyword() {\n  return {\n    type: \"TSAnyKeyword\"\n  };\n}\nfunction tsBooleanKeyword() {\n  return {\n    type: \"TSBooleanKeyword\"\n  };\n}\nfunction tsBigIntKeyword() {\n  return {\n    type: \"TSBigIntKeyword\"\n  };\n}\nfunction tsIntrinsicKeyword() {\n  return {\n    type: \"TSIntrinsicKeyword\"\n  };\n}\nfunction tsNeverKeyword() {\n  return {\n    type: \"TSNeverKeyword\"\n  };\n}\nfunction tsNullKeyword() {\n  return {\n    type: \"TSNullKeyword\"\n  };\n}\nfunction tsNumberKeyword() {\n  return {\n    type: \"TSNumberKeyword\"\n  };\n}\nfunction tsObjectKeyword() {\n  return {\n    type: \"TSObjectKeyword\"\n  };\n}\nfunction tsStringKeyword() {\n  return {\n    type: \"TSStringKeyword\"\n  };\n}\nfunction tsSymbolKeyword() {\n  return {\n    type: \"TSSymbolKeyword\"\n  };\n}\nfunction tsUndefinedKeyword() {\n  return {\n    type: \"TSUndefinedKeyword\"\n  };\n}\nfunction tsUnknownKeyword() {\n  return {\n    type: \"TSUnknownKeyword\"\n  };\n}\nfunction tsVoidKeyword() {\n  return {\n    type: \"TSVoidKeyword\"\n  };\n}\nfunction tsThisType() {\n  return {\n    type: \"TSThisType\"\n  };\n}\nfunction tsFunctionType() {\n  let typeParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let parameters = arguments.length > 1 ? arguments[1] : undefined;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  });\n}\nfunction tsConstructorType() {\n  let typeParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let parameters = arguments.length > 1 ? arguments[1] : undefined;\n  let typeAnnotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation\n  });\n}\nfunction tsTypeReference(typeName) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters\n  });\n}\nfunction tsTypePredicate(parameterName) {\n  let typeAnnotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let asserts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts\n  });\n}\nfunction tsTypeQuery(exprName) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters\n  });\n}\nfunction tsTypeLiteral(members) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeLiteral\",\n    members\n  });\n}\nfunction tsArrayType(elementType) {\n  return (0, _validateNode.default)({\n    type: \"TSArrayType\",\n    elementType\n  });\n}\nfunction tsTupleType(elementTypes) {\n  return (0, _validateNode.default)({\n    type: \"TSTupleType\",\n    elementTypes\n  });\n}\nfunction tsOptionalType(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSOptionalType\",\n    typeAnnotation\n  });\n}\nfunction tsRestType(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSRestType\",\n    typeAnnotation\n  });\n}\nfunction tsNamedTupleMember(label, elementType) {\n  let optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return (0, _validateNode.default)({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional\n  });\n}\nfunction tsUnionType(types) {\n  return (0, _validateNode.default)({\n    type: \"TSUnionType\",\n    types\n  });\n}\nfunction tsIntersectionType(types) {\n  return (0, _validateNode.default)({\n    type: \"TSIntersectionType\",\n    types\n  });\n}\nfunction tsConditionalType(checkType, extendsType, trueType, falseType) {\n  return (0, _validateNode.default)({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType\n  });\n}\nfunction tsInferType(typeParameter) {\n  return (0, _validateNode.default)({\n    type: \"TSInferType\",\n    typeParameter\n  });\n}\nfunction tsParenthesizedType(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSParenthesizedType\",\n    typeAnnotation\n  });\n}\nfunction tsTypeOperator(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null\n  });\n}\nfunction tsIndexedAccessType(objectType, indexType) {\n  return (0, _validateNode.default)({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType\n  });\n}\nfunction tsMappedType(typeParameter) {\n  let typeAnnotation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let nameType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType\n  });\n}\nfunction tsLiteralType(literal) {\n  return (0, _validateNode.default)({\n    type: \"TSLiteralType\",\n    literal\n  });\n}\nfunction tsExpressionWithTypeArguments(expression) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters\n  });\n}\nfunction tsInterfaceDeclaration(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let _extends = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let body = arguments.length > 3 ? arguments[3] : undefined;\n  return (0, _validateNode.default)({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body\n  });\n}\nfunction tsInterfaceBody(body) {\n  return (0, _validateNode.default)({\n    type: \"TSInterfaceBody\",\n    body\n  });\n}\nfunction tsTypeAliasDeclaration(id) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let typeAnnotation = arguments.length > 2 ? arguments[2] : undefined;\n  return (0, _validateNode.default)({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation\n  });\n}\nfunction tsInstantiationExpression(expression) {\n  let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters\n  });\n}\nfunction tsAsExpression(expression, typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation\n  });\n}\nfunction tsSatisfiesExpression(expression, typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation\n  });\n}\nfunction tsTypeAssertion(typeAnnotation, expression) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression\n  });\n}\nfunction tsEnumDeclaration(id, members) {\n  return (0, _validateNode.default)({\n    type: \"TSEnumDeclaration\",\n    id,\n    members\n  });\n}\nfunction tsEnumMember(id) {\n  let initializer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return (0, _validateNode.default)({\n    type: \"TSEnumMember\",\n    id,\n    initializer\n  });\n}\nfunction tsModuleDeclaration(id, body) {\n  return (0, _validateNode.default)({\n    type: \"TSModuleDeclaration\",\n    id,\n    body\n  });\n}\nfunction tsModuleBlock(body) {\n  return (0, _validateNode.default)({\n    type: \"TSModuleBlock\",\n    body\n  });\n}\nfunction tsImportType(argument) {\n  let qualifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let typeParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return (0, _validateNode.default)({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters\n  });\n}\nfunction tsImportEqualsDeclaration(id, moduleReference) {\n  return (0, _validateNode.default)({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null\n  });\n}\nfunction tsExternalModuleReference(expression) {\n  return (0, _validateNode.default)({\n    type: \"TSExternalModuleReference\",\n    expression\n  });\n}\nfunction tsNonNullExpression(expression) {\n  return (0, _validateNode.default)({\n    type: \"TSNonNullExpression\",\n    expression\n  });\n}\nfunction tsExportAssignment(expression) {\n  return (0, _validateNode.default)({\n    type: \"TSExportAssignment\",\n    expression\n  });\n}\nfunction tsNamespaceExportDeclaration(id) {\n  return (0, _validateNode.default)({\n    type: \"TSNamespaceExportDeclaration\",\n    id\n  });\n}\nfunction tsTypeAnnotation(typeAnnotation) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation\n  });\n}\nfunction tsTypeParameterInstantiation(params) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeParameterInstantiation\",\n    params\n  });\n}\nfunction tsTypeParameterDeclaration(params) {\n  return (0, _validateNode.default)({\n    type: \"TSTypeParameterDeclaration\",\n    params\n  });\n}\nfunction tsTypeParameter() {\n  let constraint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let _default = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let name = arguments.length > 2 ? arguments[2] : undefined;\n  return (0, _validateNode.default)({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name\n  });\n}\nfunction NumberLiteral(value) {\n  (0, _deprecationWarning.default)(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nfunction RegexLiteral(pattern) {\n  let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  (0, _deprecationWarning.default)(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nfunction RestProperty(argument) {\n  (0, _deprecationWarning.default)(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nfunction SpreadProperty(argument) {\n  (0, _deprecationWarning.default)(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}","map":{"version":3,"mappings":"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","names":["arrayExpression","elements","type","assignmentExpression","operator","left","right","binaryExpression","interpreterDirective","value","directive","directiveLiteral","blockStatement","body","directives","breakStatement","label","callExpression","callee","_arguments","arguments","catchClause","param","conditionalExpression","test","consequent","alternate","continueStatement","debuggerStatement","doWhileStatement","emptyStatement","expressionStatement","expression","file","program","comments","tokens","forInStatement","forStatement","init","update","functionDeclaration","id","params","generator","async","functionExpression","identifier","name","ifStatement","labeledStatement","stringLiteral","numericLiteral","nullLiteral","booleanLiteral","regExpLiteral","pattern","flags","logicalExpression","memberExpression","object","property","computed","optional","newExpression","sourceType","interpreter","sourceFile","objectExpression","properties","objectMethod","kind","key","objectProperty","shorthand","decorators","restElement","argument","returnStatement","sequenceExpression","expressions","parenthesizedExpression","switchCase","switchStatement","discriminant","cases","thisExpression","throwStatement","tryStatement","block","handler","finalizer","unaryExpression","prefix","updateExpression","variableDeclaration","declarations","variableDeclarator","whileStatement","withStatement","assignmentPattern","arrayPattern","arrowFunctionExpression","classBody","classExpression","superClass","classDeclaration","exportAllDeclaration","source","exportDefaultDeclaration","declaration","exportNamedDeclaration","specifiers","exportSpecifier","local","exported","forOfStatement","_await","await","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","imported","importExpression","options","metaProperty","meta","classMethod","_static","static","objectPattern","spreadElement","_super","taggedTemplateExpression","tag","quasi","templateElement","tail","templateLiteral","quasis","yieldExpression","delegate","awaitExpression","_import","bigIntLiteral","exportNamespaceSpecifier","optionalMemberExpression","optionalCallExpression","classProperty","typeAnnotation","classAccessorProperty","classPrivateProperty","classPrivateMethod","privateName","staticBlock","anyTypeAnnotation","arrayTypeAnnotation","elementType","booleanTypeAnnotation","booleanLiteralTypeAnnotation","nullLiteralTypeAnnotation","classImplements","typeParameters","declareClass","_extends","extends","declareFunction","declareInterface","declareModule","declareModuleExports","declareTypeAlias","declareOpaqueType","supertype","declareVariable","declareExportDeclaration","declareExportAllDeclaration","declaredPredicate","existsTypeAnnotation","functionTypeAnnotation","rest","returnType","functionTypeParam","genericTypeAnnotation","inferredPredicate","interfaceExtends","interfaceDeclaration","interfaceTypeAnnotation","intersectionTypeAnnotation","types","mixedTypeAnnotation","emptyTypeAnnotation","nullableTypeAnnotation","numberLiteralTypeAnnotation","numberTypeAnnotation","objectTypeAnnotation","indexers","callProperties","internalSlots","exact","objectTypeInternalSlot","method","objectTypeCallProperty","objectTypeIndexer","variance","objectTypeProperty","proto","objectTypeSpreadProperty","opaqueType","impltype","qualifiedTypeIdentifier","qualification","stringLiteralTypeAnnotation","stringTypeAnnotation","symbolTypeAnnotation","thisTypeAnnotation","tupleTypeAnnotation","typeofTypeAnnotation","typeAlias","typeCastExpression","typeParameter","bound","_default","default","typeParameterDeclaration","typeParameterInstantiation","unionTypeAnnotation","voidTypeAnnotation","enumDeclaration","enumBooleanBody","members","explicitType","hasUnknownMembers","enumNumberBody","enumStringBody","enumSymbolBody","enumBooleanMember","enumNumberMember","enumStringMember","enumDefaultedMember","indexedAccessType","objectType","indexType","optionalIndexedAccessType","jsxAttribute","jsxClosingElement","jsxElement","openingElement","closingElement","children","selfClosing","jsxEmptyExpression","jsxExpressionContainer","jsxSpreadChild","jsxIdentifier","jsxMemberExpression","jsxNamespacedName","namespace","jsxOpeningElement","attributes","jsxSpreadAttribute","jsxText","jsxFragment","openingFragment","closingFragment","jsxOpeningFragment","jsxClosingFragment","noop","placeholder","expectedNode","v8IntrinsicIdentifier","argumentPlaceholder","bindExpression","importAttribute","decorator","doExpression","exportDefaultSpecifier","recordExpression","tupleExpression","decimalLiteral","moduleExpression","topicReference","pipelineTopicExpression","pipelineBareFunction","pipelinePrimaryTopicReference","tsParameterProperty","parameter","tsDeclareFunction","tsDeclareMethod","tsQualifiedName","tsCallSignatureDeclaration","parameters","tsConstructSignatureDeclaration","tsPropertySignature","initializer","tsMethodSignature","tsIndexSignature","tsAnyKeyword","tsBooleanKeyword","tsBigIntKeyword","tsIntrinsicKeyword","tsNeverKeyword","tsNullKeyword","tsNumberKeyword","tsObjectKeyword","tsStringKeyword","tsSymbolKeyword","tsUndefinedKeyword","tsUnknownKeyword","tsVoidKeyword","tsThisType","tsFunctionType","tsConstructorType","tsTypeReference","typeName","tsTypePredicate","parameterName","asserts","tsTypeQuery","exprName","tsTypeLiteral","tsArrayType","tsTupleType","elementTypes","tsOptionalType","tsRestType","tsNamedTupleMember","tsUnionType","tsIntersectionType","tsConditionalType","checkType","extendsType","trueType","falseType","tsInferType","tsParenthesizedType","tsTypeOperator","tsIndexedAccessType","tsMappedType","nameType","tsLiteralType","literal","tsExpressionWithTypeArguments","tsInterfaceDeclaration","tsInterfaceBody","tsTypeAliasDeclaration","tsInstantiationExpression","tsAsExpression","tsSatisfiesExpression","tsTypeAssertion","tsEnumDeclaration","tsEnumMember","tsModuleDeclaration","tsModuleBlock","tsImportType","qualifier","tsImportEqualsDeclaration","moduleReference","isExport","tsExternalModuleReference","tsNonNullExpression","tsExportAssignment","tsNamespaceExportDeclaration","tsTypeAnnotation","tsTypeParameterInstantiation","tsTypeParameterDeclaration","tsTypeParameter","constraint","NumberLiteral","RegexLiteral","RestProperty","SpreadProperty"],"sources":["D:\\GitHub\\goit-react-hw-08-phonebook\\node_modules\\@babel\\types\\src\\builders\\generated\\index.ts"],"sourcesContent":["/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode.ts\";\nimport type * as t from \"../../index.ts\";\nimport deprecationWarning from \"../../utils/deprecationWarning.ts\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal | t.OptionalMemberExpression,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n    sourceFile: null,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function importExpression(\n  source: t.Expression,\n  options: t.Expression | null = null,\n): t.ImportExpression {\n  return validateNode<t.ImportExpression>({\n    type: \"ImportExpression\",\n    source,\n    options,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  initializer: t.Expression | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    initializer,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<\n    t.ArrayPattern | t.Identifier | t.ObjectPattern | t.RestElement\n  >,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  deprecationWarning(\"NumberLiteral\", \"NumericLiteral\", \"The node type \");\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  deprecationWarning(\"RegexLiteral\", \"RegExpLiteral\", \"The node type \");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  deprecationWarning(\"RestProperty\", \"RestElement\", \"The node type \");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  deprecationWarning(\"SpreadProperty\", \"SpreadElement\", \"The node type \");\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n"]},"metadata":{},"sourceType":"script"}