{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const selectUser = state => state.auth.user;\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\nconst baseUrl = 'https://connections-api.herokuapp.com';\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async () => {\n  const {\n    data\n  } = await axios.get(`${baseUrl}/contacts`);\n  return data;\n});\nexport const addContact = createAsyncThunk('contacts/addContact', async contact => {\n  const {\n    data\n  } = await axios.post(`${baseUrl}/contacts`, contact);\n  return data;\n});\nexport const deleteContact = createAsyncThunk('contacts/deleteContact', async contactId => {\n  await axios.delete(`${baseUrl}/contacts/${contactId}`);\n  return contactId;\n});\nexport const updateContact = createAsyncThunk('contacts/updateContact', async contact => {\n  const {\n    data\n  } = await axios.patch(`${baseUrl}/contacts/${contact.id}`, contact);\n  return data;\n});\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n    filter: ''\n  },\n  reducers: {\n    updateFilterAction: (state, action) => {\n      state.filter = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addContact.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n    }).addCase(deleteContact.fulfilled, (state, action) => {\n      state.items = state.items.filter(contact => contact.id !== action.payload);\n    }).addCase(updateContact.fulfilled, (state, action) => {\n      const updatedContact = action.payload;\n      const existingContact = state.items.find(contact => contact.id === updatedContact.id);\n      if (existingContact) {\n        Object.assign(existingContact, updatedContact);\n      }\n    });\n  }\n});\nexport const {\n  updateFilterAction\n} = contactsSlice.actions;\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","selectUser","state","auth","user","selectContacts","contacts","items","selectFilter","filter","baseUrl","fetchContacts","data","get","addContact","contact","post","deleteContact","contactId","delete","updateContact","patch","id","contactsSlice","name","initialState","status","error","reducers","updateFilterAction","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","message","push","updatedContact","existingContact","find","Object","assign","actions","reducer"],"sources":["D:/GitHub/goit-react-hw-08-phonebook/src/redux/contactsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const selectUser = (state) => state.auth.user;\nexport const selectContacts = (state) => state.contacts.items;\nexport const selectFilter = (state) => state.contacts.filter;\n\nconst baseUrl = 'https://connections-api.herokuapp.com';\n\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async () => {\n  const { data } = await axios.get(`${baseUrl}/contacts`);\n  return data;\n});\n\nexport const addContact = createAsyncThunk('contacts/addContact', async (contact) => {\n  const { data } = await axios.post(`${baseUrl}/contacts`, contact);\n  return data;\n});\n\nexport const deleteContact = createAsyncThunk('contacts/deleteContact', async (contactId) => {\n  await axios.delete(`${baseUrl}/contacts/${contactId}`);\n  return contactId;\n});\n\nexport const updateContact = createAsyncThunk('contacts/updateContact', async (contact) => {\n  const { data } = await axios.patch(`${baseUrl}/contacts/${contact.id}`, contact);\n  return data;\n});\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n    filter: '',\n  },\n  reducers: {\n    updateFilterAction: (state, action) => {\n      state.filter = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.items = action.payload;\n      })\n      .addCase(fetchContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addContact.fulfilled, (state, action) => {\n        state.items.push(action.payload);\n      })\n      .addCase(deleteContact.fulfilled, (state, action) => {\n        state.items = state.items.filter((contact) => contact.id !== action.payload);\n      })\n      .addCase(updateContact.fulfilled, (state, action) => {\n        const updatedContact = action.payload;\n        const existingContact = state.items.find((contact) => contact.id === updatedContact.id);\n        if (existingContact) {\n          Object.assign(existingContact, updatedContact);\n        }\n      });\n  },\n});\n\nexport const { updateFilterAction } = contactsSlice.actions;\n\nexport default contactsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}