{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { selectUser } from './authSlice';\nimport { createSelector } from 'reselect';\nconst baseUrl = 'https://connections-api.herokuapp.com';\nexport const fetchContacts = createAsyncThunk('contacts/fetchAll', async (_, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n  if (!user) {\n    return [];\n  }\n  try {\n    const response = await axios.get(`${baseUrl}/contacts`, {\n      headers: {\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n  if (!user) {\n    throw new Error('User is not authenticated');\n  }\n  try {\n    const response = await axios.post(`${baseUrl}/contacts`, contact, {\n      headers: {\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n});\nexport const deleteContact = createAsyncThunk('contacts/deleteContact', async (contactId, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n  if (!user) {\n    throw new Error('User is not authenticated');\n  }\n  await axios.delete(`${baseUrl}/contacts/${contactId}`, {\n    headers: {\n      Authorization: `Bearer ${user.token}`\n    }\n  });\n  return contactId;\n});\nconst selectContactsData = state => state.contacts.items;\nconst selectFilter = state => state.contacts.filter;\nexport const selectContacts = createSelector([selectContactsData, selectFilter], (items, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter(contact => contact.name.toLowerCase().includes(normalizedFilter) || contact.number.includes(normalizedFilter));\n});\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n    filter: ''\n  },\n  reducers: {\n    updateFilter: (state, action) => {\n      state.filter = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchContacts.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchContacts.fulfilled, (state, action) => {\n      state.items = action.payload.map(contact => ({\n        id: contact.id,\n        name: contact.name,\n        number: contact.number || ''\n      }));\n      state.isLoading = false;\n    }).addCase(fetchContacts.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message;\n    }).addCase(addContact.fulfilled, (state, action) => {\n      const newContact = action.payload;\n      const isContactUnique = !state.items.some(existingContact => existingContact.name.toLowerCase() === newContact.name.toLowerCase());\n      if (isContactUnique) {\n        state.items.push(newContact);\n      } else {\n        toast.error('Контакт не уникальный!', {\n          position: 'top-right',\n          autoClose: 3000,\n          hideProgressBar: true,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: true\n        });\n      }\n    }).addCase(deleteContact.fulfilled, (state, action) => {\n      state.items = state.items.filter(contact => contact.id !== action.payload);\n    });\n  }\n});\nexport const {\n  updateFilter: updateFilterAction\n} = contactsSlice.actions;\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","toast","selectUser","createSelector","baseUrl","fetchContacts","_","thunkAPI","user","getState","response","get","headers","Authorization","token","data","error","addContact","contact","Error","post","deleteContact","contactId","delete","selectContactsData","state","contacts","items","selectFilter","filter","selectContacts","normalizedFilter","toLowerCase","name","includes","number","contactsSlice","initialState","isLoading","reducers","updateFilter","action","payload","extraReducers","builder","addCase","pending","fulfilled","map","id","rejected","message","newContact","isContactUnique","some","existingContact","push","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","updateFilterAction","actions","reducer"],"sources":["D:/GitHub/goit-react-hw-08-phonebook/src/redux/contactsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { selectUser } from './authSlice';\nimport { createSelector } from 'reselect';\n\nconst baseUrl = 'https://connections-api.herokuapp.com';\n\nexport const fetchContacts = createAsyncThunk('contacts/fetchAll', async (_, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n\n  if (!user) {\n    return [];\n  }\n\n  try {\n    const response = await axios.get(`${baseUrl}/contacts`, {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n});\n\nexport const addContact = createAsyncThunk('contacts/addContact', async (contact, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n\n  if (!user) {\n    throw new Error('User is not authenticated');\n  }\n\n  try {\n    const response = await axios.post(`${baseUrl}/contacts`, contact, {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n});\n\nexport const deleteContact = createAsyncThunk('contacts/deleteContact', async (contactId, thunkAPI) => {\n  const user = selectUser(thunkAPI.getState());\n\n  if (!user) {\n    throw new Error('User is not authenticated');\n  }\n\n  await axios.delete(`${baseUrl}/contacts/${contactId}`, {\n    headers: {\n      Authorization: `Bearer ${user.token}`,\n    },\n  });\n  return contactId;\n});\n\nconst selectContactsData = (state) => state.contacts.items;\nconst selectFilter = (state) => state.contacts.filter;\n\nexport const selectContacts = createSelector(\n  [selectContactsData, selectFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter) || contact.number.includes(normalizedFilter)\n    );\n  }\n);\n\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: { items: [], isLoading: false, error: null, filter: '' },\n  reducers: {\n    updateFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchContacts.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(fetchContacts.fulfilled, (state, action) => {\n        state.items = action.payload.map((contact) => ({\n          id: contact.id,\n          name: contact.name,\n          number: contact.number || '',\n        }));\n        state.isLoading = false;\n      })\n      .addCase(fetchContacts.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message;\n      })\n      .addCase(addContact.fulfilled, (state, action) => {\n        const newContact = action.payload;\n        const isContactUnique = !state.items.some(\n          (existingContact) => existingContact.name.toLowerCase() === newContact.name.toLowerCase()\n        );\n\n        if (isContactUnique) {\n          state.items.push(newContact);\n        } else {\n          toast.error('Контакт не уникальный!', {\n            position: 'top-right',\n            autoClose: 3000,\n            hideProgressBar: true,\n            closeOnClick: true,\n            pauseOnHover: false,\n            draggable: true,\n          });\n        }\n      })\n      .addCase(deleteContact.fulfilled, (state, action) => {\n        state.items = state.items.filter((contact) => contact.id !== action.payload);\n      });\n  },\n});\n\nexport const { updateFilter: updateFilterAction } = contactsSlice.actions;\nexport default contactsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}